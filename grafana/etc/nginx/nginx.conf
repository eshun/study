load_module modules/ngx_http_opentracing_module.so;

worker_processes  16;
error_log /var/log/nginx/error.log;
events {
    worker_connections 4096;
}

http {
    opentracing on;
    opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /etc/jaeger-config.json;

    upstream jaeger {
        server 10.83.3.193:8081;
    }
    log_format opentracing '{"timestamp":"$time_iso8601",'
                           '"source":"$server_addr",'
                           '"hostname":"$hostname",'
                           '"ip":"$http_x_forwarded_for",'
                           '"uber_trace_id":"$opentracing_context_uber_trace_id",'
                           '"trace_id":"$opentracing_context_uber_trace_id",'
                           '"client":"$remote_addr",'
                           '"request_method":"$request_method",'
                           '"scheme":"$scheme",'
                           '"domain":"$server_name",'
                           '"referer":"$http_referer",'
                           '"request":"$request_uri",'
                           '"args":"$args",'
                           '"size":$body_bytes_sent,'
                           '"status": $status,'
                           '"responsetime":$request_time,'
                           '"upstreamtime":"$upstream_response_time",'
                           '"upstreamaddr":"$upstream_addr",'
                           '"http_user_agent":"$http_user_agent",'
                           '"https":"$https"'
                           '}';

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" ';

    access_log /var/log/nginx/access.log opentracing;

    server {
        listen 8080;

        location /jaeger {
            opentracing_operation_name $uri;
            opentracing_propagate_context;
            opentracing_trace_locations off;

            proxy_pass http://jaeger;
        }

        location ~ /loki {
            opentracing_operation_name $uri;
            opentracing_propagate_context;
            opentracing_trace_locations off;

            proxy_pass http://loki:3100;
        }

        location = / {
            default_type text/html;
            content_by_lua '
                local bridge_tracer = require("opentracing_bridge_tracer")
                local tracer = bridge_tracer.new_from_global()
                local parent_context = tracer:binary_extract(ngx.var.opentracing_binary_context)
                local span = tracer:start_span("lua-hello", {["references"] = {{"child_of", parent_context}}})
                ngx.say("<p>hello, world!</p>")
                span:finish()
            ';
        }
    }
}
